#!/usr/bin/env node

/**
 * Test script for the new subject-levels many-to-many functionality
 */

import { createClient } from '@supabase/supabase-js'

// Load environment variables
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing required environment variables:')
  console.error('   VITE_SUPABASE_URL')
  console.error('   VITE_SUPABASE_ANON_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function testSubjectLevels() {
  try {
    console.log('üß™ Testing subject-levels many-to-many functionality...\n')

    // Test 1: Check if subject_levels table exists and has data
    console.log('1Ô∏è‚É£ Testing subject_levels table...')
    const { data: subjectLevels, error: slError } = await supabase
      .from('subject_levels')
      .select(`
        *,
        subjects(title),
        levels(title)
      `)
      .limit(5)

    if (slError) {
      console.error('‚ùå Error querying subject_levels:', slError.message)
      return
    }

    console.log(`‚úÖ Found ${subjectLevels?.length || 0} subject-level relationships`)
    if (subjectLevels && subjectLevels.length > 0) {
      subjectLevels.forEach((sl, index) => {
        console.log(`   ${index + 1}. ${sl.subjects?.title} ‚Üí ${sl.levels?.title}`)
      })
    }
    console.log('')

    // Test 2: Test the new API functions (simulate what the frontend would do)
    console.log('2Ô∏è‚É£ Testing subjects with levels query...')
    const { data: subjectsWithLevels, error: swlError } = await supabase
      .from('subjects')
      .select(`
        *,
        subject_levels(
          level_id,
          levels(*)
        )
      `)
      .limit(3)

    if (swlError) {
      console.error('‚ùå Error querying subjects with levels:', swlError.message)
      return
    }

    console.log(`‚úÖ Found ${subjectsWithLevels?.length || 0} subjects with level data`)
    subjectsWithLevels?.forEach((subject, index) => {
      const levelNames = subject.subject_levels?.map(sl => sl.levels?.title).filter(Boolean) || []
      console.log(`   ${index + 1}. "${subject.title}" ‚Üí Levels: [${levelNames.join(', ')}]`)
    })
    console.log('')

    // Test 3: Test filtering subjects by level
    console.log('3Ô∏è‚É£ Testing subject filtering by level...')
    if (subjectLevels && subjectLevels.length > 0) {
      const testLevelId = subjectLevels[0].level_id
      const { data: filteredSubjects, error: filterError } = await supabase
        .from('subjects')
        .select(`
          *,
          subject_levels(
            level_id,
            levels(*)
          )
        `)
        .eq('subject_levels.level_id', testLevelId)

      if (filterError) {
        console.error('‚ùå Error filtering subjects by level:', filterError.message)
        return
      }

      console.log(`‚úÖ Found ${filteredSubjects?.length || 0} subjects for level ID: ${testLevelId}`)
      filteredSubjects?.forEach((subject, index) => {
        console.log(`   ${index + 1}. "${subject.title}"`)
      })
    }
    console.log('')

    // Test 4: Check if we can create a new subject-level relationship
    console.log('4Ô∏è‚É£ Testing subject-level relationship creation...')
    
    // First, get a subject and level to test with
    const { data: testSubject, error: subError } = await supabase
      .from('subjects')
      .select('id, title')
      .limit(1)
      .single()

    const { data: testLevel, error: levError } = await supabase
      .from('levels')
      .select('id, title')
      .limit(1)
      .single()

    if (subError || levError || !testSubject || !testLevel) {
      console.log('‚ö†Ô∏è  Skipping relationship creation test (no test data available)')
    } else {
      // Check if relationship already exists
      const { data: existingRel, error: existError } = await supabase
        .from('subject_levels')
        .select('id')
        .eq('subject_id', testSubject.id)
        .eq('level_id', testLevel.id)
        .single()

      if (existError && existError.code !== 'PGRST116') { // PGRST116 = no rows returned
        console.error('‚ùå Error checking existing relationship:', existError.message)
        return
      }

      if (existingRel) {
        console.log(`‚úÖ Relationship already exists: "${testSubject.title}" ‚Üí "${testLevel.title}"`)
      } else {
        console.log(`‚ÑπÔ∏è  No existing relationship found between "${testSubject.title}" and "${testLevel.title}"`)
        console.log('   (This is normal - relationships are created through the admin interface)')
      }
    }
    console.log('')

    console.log('üéâ All tests completed successfully!')
    console.log('')
    console.log('üìã Summary:')
    console.log('   ‚úÖ subject_levels table is accessible')
    console.log('   ‚úÖ Subjects can be queried with their levels')
    console.log('   ‚úÖ Subject filtering by level works')
    console.log('   ‚úÖ Database structure is ready for the frontend')
    console.log('')
    console.log('üöÄ You can now test the admin dashboard to:')
    console.log('   1. Create subjects with multiple levels')
    console.log('   2. Edit existing subjects to add/remove levels')
    console.log('   3. Filter subjects by level')
    console.log('   4. View subjects with all their assigned levels')

  } catch (error) {
    console.error('‚ùå Test failed:', error.message)
    process.exit(1)
  }
}

// Run the tests
testSubjectLevels()

